name: 'Terraform y Carga de Datos en GCP'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ------ JOB PARA INFRACOST (sin cambios) ------
  infracost:
    # ... (este job no necesita cambios) ...
    name: 'Análisis de Costos con Infracost'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run Infracost and Comment
        uses: infracost/actions/comment@v2
        with:
          path: ./terraform
          behavior: update

  # ------ JOB PARA APLICAR CAMBIOS Y EXPORTAR LA IP ------
  terraform-apply:
    name: 'Apply Terraform and Get IP'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      db_ip: ${{ steps.apply-and-export.outputs.db_ip }}
    
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      # --- PASO UNIFICADO Y CORREGIDO ---
      - name: Apply and Export Outputs
        id: apply-and-export
        run: |
          # Intenta ejecutar 'apply'. Si falla, revisa el motivo.
          if ! terraform apply -auto-approve -no-color &> terraform_output.log; then
            echo "Terraform apply falló. Verificando si el error es porque la instancia ya existe..."
            if grep -q "instanceAlreadyExists" terraform_output.log; then
              echo "Error aceptable: La instancia ya existe. El estado de Terraform se refrescará."
              # Terraform refresca el estado incluso en este fallo, así que el output estará disponible.
            else
              echo "Error crítico de Terraform. El workflow se detendrá."
              cat terraform_output.log
              exit 1
            fi
          fi
          
          # Después de un 'apply' exitoso o un fallo controlado, obtenemos la IP.
          echo "Extrayendo la IP de la base de datos..."
          ip_address=$(terraform output -raw db_instance_ip)
          echo "La IP obtenida es: $ip_address"
          
          # Asigna la IP a la salida del job para que el siguiente trabajo pueda usarla.
          echo "db_ip=$ip_address" >> $GITHUB_OUTPUT
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      
  # ------ JOB PARA CARGAR LOS DATOS (sin cambios) ------
  load-data:
    name: 'Cargar Datos a MySQL'
    needs: terraform-apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas mysql-connector-python

      - name: Run create and load script
        run: python crear_y_cargar.py
        env:
          DB_HOST: ${{ needs.terraform-apply.outputs.db_ip }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          CSV_FILENAME: 'ai_job_dataset.csv'
          TABLE_NAME: 'jobs'